import SignPDF from './SignPDF.min.cjs';
import fs from 'node:fs';
import axios from 'axios';
import { pdflibAddPlaceholder } from './customSignPdf/pdflibplaceholder.min.js';
import { PDFDocument } from 'pdf-lib';
import { saveFileUsage } from '../../../Utils.js';
import GenerateCertificate from './GenerateCertificate.js';
const serverUrl = process.env.SERVER_URL,
  APPID = process.env.APP_ID,
  masterKEY = process.env.MASTER_KEY;
async function uploadFile(e, a) {
  try {
    var t = fs.readFileSync(a),
      s = new Parse.File(e, [...t], 'application/pdf'),
      r = (await s.save({ useMasterKey: !0 }), s.url());
    return { imageUrl: r };
  } catch (e) {
    console.log('Err ', e), fs.unlinkSync(a);
  }
}
async function updateDoc(t, s, r, i, o, n) {
  try {
    var d = {
      UserPtr: { __type: 'Pointer', className: n, objectId: r },
      SignedUrl: s,
      Activity: 'Signed',
      ipAddress: i,
    };
    let e;
    var l = (e = o.AuditTrail && 0 < o.AuditTrail.length ? [...o.AuditTrail, d] : [d]).filter(
      e => 'Signed' === e.Activity
    );
    let a = !1;
    !((o.Signers && 0 < o.Signers.length && l.length !== o.Signers.length) || !(a = !0));
    var c = { SignedUrl: s, AuditTrail: e, IsCompleted: a };
    await axios.put(serverUrl + '/classes/contracts_Document/' + t, c, {
      headers: {
        'Content-Type': 'application/json',
        'X-Parse-Application-Id': APPID,
        'X-Parse-Master-Key': masterKEY,
      },
    });
    return { isCompleted: a, message: 'success', AuditTrail: e };
  } catch (e) {
    return console.log('update doc err ', e), 'err';
  }
}
async function sendCompletedMail(e) {
  var a = e.url,
    t = e.sender,
    s = e.pdfName,
    r = e.receiver,
    e = {
      extUserId: e.extUserId,
      url: a,
      from: 'OpenSign™',
      recipient: r,
      subject: `Document ${s} has been signed by all parties`,
      pdfName: s,
      html:
        "<html><head><meta http-equiv='Content-Type' content='text/html; charset=UTF-8' /></head><body>  <div style='background-color:#f5f5f5;padding:20px'>    <div style='box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 12px;background-color:white;'> <div><img src=https://qikinnovation.ams3.digitaloceanspaces.com/logo.png  height='50' style='padding:20px'/> </div><div style='padding:2px;font-family:system-ui; background-color: #47a3ad;'>    <p style='font-size:20px;font-weight:400;color:white;padding-left:20px',> Document sign successfully</p></div><div><p style='padding:20px;font-family:system-ui;font-size:14px'>All parties have successfully signed the document" +
        s +
        '. Kindly download the document from the attachment.</p></div> </div><div><p>This is an automated email from OpenSign™. For any queries regarding this email, please contact the sender ' +
        t.Mail +
        ' directly. If you think this email is inappropriate or spam, you may file a complaint with OpenSign™ <a href=www.opensignlabs.com target=_blank>here</a>.</p></div></div></body></html>',
    };
  await axios.post(serverUrl + '/functions/sendmailv3', e, {
    headers: {
      'Content-Type': 'application/json',
      'X-Parse-Application-Id': APPID,
      'X-Parse-Master-Key': masterKEY,
    },
  });
}
async function sendDoctoWebhook(t, e, a, s) {
  let r = [];
  (r = s
    ? { name: s?.Name, email: s?.Email, phone: s?.Phone }
    : t?.data?.Signers?.map(e => ({ name: e.Name, email: e.Email, phone: e.Phone })) || [
        {
          name: t?.data?.ExtUserPtr?.Name,
          email: t?.data?.ExtUserPtr?.Email,
          phone: t?.data?.ExtUserPtr?.Phone,
        },
      ]),
    t.data.ExtUserPtr?.Webhook &&
      ((s =
        'signed' === a
          ? { signer: r, signedAt: new Date() }
          : { signers: r, completedAt: new Date() }),
      (a = {
        event: a,
        objectId: t?.data?.objectId,
        file: e || '',
        name: t?.data?.Name,
        note: t?.data?.Note || '',
        description: t?.data?.Description || '',
        ...s,
        createdAt: t?.data?.createdAt,
      }),
      await axios
        .post(t?.data?.ExtUserPtr?.Webhook, a, { headers: { 'Content-Type': 'application/json' } })
        .then(e => {
          try {
            var a = new Parse.Object('contracts_Webhook');
            a.set('Log', e?.status),
              a.set('UserId', {
                __type: 'Pointer',
                className: '_User',
                objectId: t.data.ExtUserPtr.UserId.objectId,
              }),
              a.save(null, { useMasterKey: !0 });
          } catch (e) {
            console.log('err save in contracts_Webhook', e.message);
          }
        })
        .catch(e => {
          console.log('Err send data to webhook', e.message);
          try {
            var a = new Parse.Object('contracts_Webhook');
            a.set('Log', e?.status),
              a.set('UserId', {
                __type: 'Pointer',
                className: '_User',
                objectId: t.data.ExtUserPtr.UserId.objectId,
              }),
              a.save(null, { useMasterKey: !0 });
          } catch (e) {
            console.log('err save in contracts_Webhook', e.message);
          }
        }));
}
async function PDF(o) {
  try {
    var n = o.params.docId,
      e = o.params.userId,
      d = await axios.get(
        serverUrl + '/classes/contracts_Document/' + n + '?include=ExtUserPtr,Signers',
        {
          headers: {
            'Content-Type': 'application/json',
            'X-Parse-Application-Id': APPID,
            'X-Parse-Master-Key': masterKEY,
          },
        }
      ),
      l = await axios.get(serverUrl + '/users/me', {
        headers: {
          'X-Parse-Application-Id': APPID,
          'X-Parse-Session-Token': o.headers.sessiontoken,
        },
      });
    if (!l.data || !l.data.objectId) return { status: 'error', message: 'This user not allowed!' };
    {
      var a,
        t,
        s,
        c = JSON.stringify({ objectId: e });
      let r, i;
      i = e
        ? (a = await axios.get(serverUrl + '/classes/contracts_Contactbook?where=' + c, {
            headers: {
              'X-Parse-Application-Id': APPID,
              'X-Parse-Session-Token': o.headers.sessiontoken,
            },
          })).data && 0 < a.data.results.length
          ? ((r = a), 'contracts_Contactbook')
          : ((r = await axios.get(serverUrl + '/classes/contracts_Users?where=' + c, {
              headers: { 'X-Parse-Application-Id': APPID, 'X-Parse-Master-Key': masterKEY },
            })),
            'contracts_Users')
        : ((t = JSON.stringify({
            UserId: { __type: 'Pointer', className: '_User', objectId: l.data.objectId },
          })),
          (s = await axios.get(serverUrl + '/classes/contracts_Users?where=' + t, {
            headers: { 'X-Parse-Application-Id': APPID, 'X-Parse-Master-Key': masterKEY },
          })).data && 0 < s.data.results.length
            ? ((r = s), 'contracts_Users')
            : ((r = await axios.get(serverUrl + '/classes/contracts_Contactbook?where=' + t, {
                headers: {
                  'X-Parse-Application-Id': APPID,
                  'X-Parse-Session-Token': o.headers.sessiontoken,
                },
              })),
              'contracts_Contactbook'));
      var p = r.data.results[0].Name,
        m = r.data.results[0].Email;
      if (!o.params.pdfFile) return { status: 'error', message: 'Pdf file not present!' };
      {
        let e = Buffer.from(o.params.pdfFile, 'base64');
        var g = process.env.PFX_BASE64,
          u = Buffer.from(g, 'base64'),
          f = {
            UserPtr: { __type: 'Pointer', className: i, objectId: r.data.results[0].objectId },
            SignedUrl: '',
            Activity: 'Signed',
            ipAddress: o.headers['x-real-ip'],
          };
        let a;
        var h = (a =
          d.data.AuditTrail && 0 < d.data.AuditTrail.length
            ? [...d.data.AuditTrail, f]
            : [f]).filter(e => 'Signed' === e.Activity);
        let t = !1;
        !(
          (d.data.Signers && 0 < d.data.Signers.length && h.length !== d.data.Signers.length) ||
          !(t = !0)
        );
        var P,
          y,
          v,
          U,
          b,
          I,
          w = `exported_file_${Math.floor(5e3 * Math.random())}.pdf`,
          A = './exports/' + w;
        let s = e.length;
        s = (
          t
            ? ((P = d.data.Signers?.map(e => e.Name + ' <' + e.Email + '>')),
              (e =
                P && 0 < P.length
                  ? ((y = await PDFDocument.load(e)),
                    pdflibAddPlaceholder({
                      pdfDoc: y,
                      reason: 'Digitally signed by OpenSign for ' + P?.join(', '),
                      location: 'n/a',
                      signatureLength: 15e3,
                    }),
                    (v = await y.save()),
                    Buffer.from(v))
                  : ((U = await PDFDocument.load(e)),
                    pdflibAddPlaceholder({
                      pdfDoc: U,
                      reason: 'Digitally signed by OpenSign for ' + p + ' <' + m + '>',
                      location: 'n/a',
                      signatureLength: 15e3,
                    }),
                    (b = await U.save()),
                    Buffer.from(b))),
              (I = await new SignPDF(e, u).signPDF()),
              fs.writeFileSync(A, I),
              I)
            : (fs.writeFileSync(A, e), e)
        ).length;
        var D,
          S,
          x,
          E,
          _,
          j,
          k,
          F,
          T,
          N,
          C = await uploadFile(w, A);
        if (C && C.imageUrl)
          return (
            (D = await updateDoc(
              o.params.docId,
              C.imageUrl,
              r.data.results[0].objectId,
              o.headers['x-real-ip'],
              d.data,
              i
            )),
            sendDoctoWebhook(d, C.imageUrl, 'signed', r?.data.results?.[0]),
            saveFileUsage(s, C.imageUrl, l.data.objectId),
            D &&
              D.isCompleted &&
              ((S = {
                url: C.imageUrl,
                sender: { Mail: d.data.ExtUserPtr.Email, Name: 'OpenSign™' },
                pdfName: d.data.Name,
                receiver: d.data.ExtUserPtr.Email,
                extUserId: d.data.ExtUserPtr.objectId,
              }),
              (x = { ...d.data, AuditTrail: D.AuditTrail }),
              (E = await GenerateCertificate(x)),
              (_ = await PDFDocument.load(E)),
              pdflibAddPlaceholder({
                pdfDoc: _,
                reason: 'Digitally signed by OpenSign.',
                location: 'n/a',
                signatureLength: 15e3,
              }),
              (j = await _.save()),
              (k = Buffer.from(j)),
              (F = await new SignPDF(k, u).signPDF()),
              fs.writeFileSync('./exports/certificate.pdf', F),
              (N = {
                CertificateUrl: (T = await uploadFile(
                  'certificate.pdf',
                  './exports/certificate.pdf'
                )).imageUrl,
              }),
              await axios.put(serverUrl + '/classes/contracts_Document/' + n, N, {
                headers: {
                  'Content-Type': 'application/json',
                  'X-Parse-Application-Id': APPID,
                  'X-Parse-Master-Key': masterKEY,
                },
              }),
              d.data.IsSendMail && !1 === d.data.IsSendMail
                ? console.log("don't send mail")
                : sendCompletedMail(S),
              saveFileUsage(k.length, T.imageUrl, l.data.objectId),
              sendDoctoWebhook(d, C.imageUrl, 'completed')),
            fs.unlinkSync(A),
            console.log('New Signed PDF created called: ' + A),
            'success' === D.message
              ? { status: 'success', data: C.imageUrl }
              : { status: 'error', message: 'Please provide required parameters!' }
          );
      }
    }
  } catch (e) {
    return (
      console.log('Err ', e),
      'ERR_BAD_REQUEST' === e.code
        ? { status: 'error', message: 'Invalid session token!' }
        : { status: 'error', message: 'Encrypted files are currently not supported!' }
    );
  }
}
export default PDF;
